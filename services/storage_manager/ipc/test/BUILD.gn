# Copyright (C) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")
ohos_unittest("storage_manager_provider_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_service/storage_manager"

  sources = [
    "${storage_daemon_path}/utils/storage_radar.cpp",
    "${storage_manager_path}/account_subscriber/account_subscriber.cpp",
    "${storage_manager_path}/crypto/filesystem_crypto.cpp",
    "${storage_manager_path}/ipc/src/storage_manager.cpp",
    "${storage_manager_path}/ipc/src/storage_manager_provider.cpp",
    "${storage_manager_path}/storage/src/bundle_manager_connector.cpp",
    "${storage_manager_path}/storage_daemon_communication/src/storage_daemon_communication.cpp",
    "${storage_manager_path}/user/src/multi_user_manager_service.cpp",
    "storage_manager_provider_test.cpp",
  ]

  include_dirs = [
    "${storage_manager_path}/include/ipc",
    "${storage_daemon_path}/include",
    "${storage_daemon_path}/utils",
    "${storage_manager_path}/include/storage",
    "${storage_interface_path}/innerk/its/storage_manager/native",
  ]

  defines = [
    "STORAGE_LOG_TAG = \"StorageManager\"",
    "LOG_DOMAIN = 0xD004300",
  ]

  deps = [
    "${storage_daemon_path}:storage_daemon_header",
    "${storage_interface_path}/innerkits/storage_manager/native:storage_manager_sa_proxy",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "appspawn:appspawn_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (storage_service_media_fuse) {
    defines += [ "STORAGE_SERVICE_MEDIA_FUSE" ]
  }

  if (storage_service_user_crypto_manager) {
    defines += [ "USER_CRYPTO_MANAGER" ]
  }
  cflags_cc = [ "--coverage"]
  ldflags = ["--coverage"]
}

ohos_unittest("storage_manager_provider_permission_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_service/storage_manager"

  sources = [
    "${storage_daemon_path}/utils/storage_radar.cpp",
    "${storage_manager_path}/account_subscriber/account_subscriber.cpp",
    "${storage_manager_path}/crypto/filesystem_crypto.cpp",
    "${storage_manager_path}/ipc/src/storage_manager.cpp",
    "${storage_manager_path}/ipc/src/storage_manager_provider.cpp",
    "${storage_manager_path}/storage_daemon_communication/src/storage_daemon_communication.cpp",
    "${storage_manager_path}/user/src/multi_user_manager_service.cpp",
    "storage_manager_provider_permission_test.cpp",
  ]

  include_dirs = [
    "${storage_manager_path}/include/ipc",
    "${storage_daemon_path}/include",
    "${storage_daemon_path}/utils",
    "${storage_manager_path}/include/storage",
    "${storage_interface_path}/innerk/its/storage_manager/native",
  ]

  defines = [
    "STORAGE_LOG_TAG = \"StorageManager\"",
    "LOG_DOMAIN = 0xD004300",
    "STORAGE_MANAGER_UNIT_TEST",
  ]

  deps = [
    "${storage_daemon_path}:storage_daemon_header",
    "${storage_interface_path}/innerkits/storage_manager/native:storage_manager_sa_proxy",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "appspawn:appspawn_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (storage_service_media_fuse) {
    defines += [ "STORAGE_SERVICE_MEDIA_FUSE" ]
  }

  if (storage_service_user_crypto_manager) {
    defines += [ "USER_CRYPTO_MANAGER" ]
  }
  cflags_cc = [ "--coverage"]
  ldflags = ["--coverage"]
}

group("storage_manager_ipc_test") {
  testonly = true
  deps = [ ":storage_manager_provider_test" ]
  deps += [ ":storage_manager_provider_permission_test" ]
}
