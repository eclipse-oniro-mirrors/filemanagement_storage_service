# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

ohos_unittest("disk_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_manager"

  sources = [
    "${storage_manager_path}/innerkits_impl/src/disk.cpp",
    "disk_test.cpp",
  ]

  include_dirs = [
    "${storage_daemon_path}/include",
    "${storage_manager_path}/include",
    "${storage_service_path}/utils/include",
    "include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("volume_core_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_manager"

  sources = [
    "${storage_manager_path}/innerkits_impl/src/volume_core.cpp",
    "volume_core_test.cpp",
  ]

  include_dirs = [
    "${storage_daemon_path}/include",
    "${storage_manager_path}/include",
    "${storage_service_path}/utils/include",
    "include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("volume_external_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_manager"

  sources = [
    "${storage_manager_path}/innerkits_impl/src/disk.cpp",
    "${storage_manager_path}/innerkits_impl/src/volume_core.cpp",
    "${storage_manager_path}/innerkits_impl/src/volume_external.cpp",
    "disk_test.cpp",
    "volume_core_test.cpp",
    "volume_external_test.cpp",
  ]

  include_dirs = [
    "${storage_daemon_path}/include",
    "${storage_manager_path}/include",
    "${storage_service_path}/utils/include",
    "include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("storage_stats_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_manager"

  sources = [
    "${storage_manager_path}/innerkits_impl/src/bundle_stats.cpp",
    "${storage_manager_path}/innerkits_impl/src/storage_stats.cpp",
    "bundle_stats_test.cpp",
    "storage_stats_test.cpp",
  ]

  include_dirs = [
    "${storage_daemon_path}/include",
    "${storage_manager_path}/include",
    "${storage_service_path}/utils/include",
    "include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

group("storage_manager_innerkits_test") {
  testonly = true
  deps = [
    ":disk_test",
    ":storage_stats_test",
    ":volume_core_test",
    ":volume_external_test",
  ]
}
