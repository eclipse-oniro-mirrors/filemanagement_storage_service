# Copyright (C) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

ohos_unittest("storage_total_status_service_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_service/storage_manager"

  sources = [ "storage_total_status_service_test.cpp" ]

  include_dirs = [
    "${storage_interface_path}/innerkits/storage_manager/native",
    "${storage_service_common_path}/include",
    "${storage_daemon_path}/include",
    "${storage_manager_path}/include",
    "${storage_service_path}/utils/include",
  ]

  defines = [
    "STORAGE_LOG_TAG = \"StorageManager\"",
    "LOG_DOMAIN = 0xD004300",
    "private = public",
  ]

  deps = [
    "${storage_daemon_path}:storage_common_utils",
    "${storage_daemon_path}:storage_daemon_ipc",
    "${storage_service_path}/services/storage_manager:storage_manager",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
    "relational_store:native_dataability",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
    "storage_service:storage_manager_sa_proxy",
  ]

  if (enable_screenlock_manager) {
    defines += [ "ENABLE_SCREENLOCK_MANAGER" ]
    external_deps += [ "screenlock_mgr:screenlock_client" ]
  }
}

ohos_unittest("volume_storage_status_service_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_service/storage_manager"

  sources = [
    "${storage_manager_path}/storage/src/storage_status_service.cpp",
    "${storage_manager_path}/storage/src/volume_storage_status_service.cpp",
    "${storage_manager_path}/volume/src/volume_manager_service.cpp",
    "volume_storage_status_service_test.cpp",
  ]
  include_dirs = [
    "${storage_interface_path}/innerkits/storage_manager/native",
    "${storage_service_common_path}/include",
    "${storage_daemon_path}/include",
    "${storage_manager_path}/include",
  ]
  defines = [
    "STORAGE_LOG_TAG = \"StorageManager\"",
    "LOG_DOMAIN = 0xD004300",
  ]

  if (storage_service_external_storage_manager) {
    defines += [ "EXTERNAL_STORAGE_MANAGER" ]
  }

  deps = [ "${storage_daemon_path}:storage_daemon_header" ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]
}

ohos_unittest("storage_monitor_service_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${storage_service_path}/cfi_blocklist.txt"
  }
  module_out_path = "storage_service/storage_service/storage_manager"

  sources = [
    "${storage_service_path}/test/unittest/mock/src/storage_total_status_service_mock.cpp",
    "storage_monitor_service_test.cpp",
  ]

  include_dirs = [
    "${storage_daemon_path}/include",
    "${storage_manager_path}/include",
    "${storage_service_path}/interfaces/innerkits/storage_manager/native",
    "${storage_service_path}/test/unittest/mock/include",
  ]

  defines = [
    "STORAGE_LOG_TAG = \"StorageManager\"",
    "LOG_DOMAIN = 0xD004300",
    "private=public",
  ]

  deps = [ "${storage_service_path}/services/storage_manager:storage_manager" ]

  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
  ]
}

group("storage_manager_storage_test") {
  testonly = true
  deps = [
    ":storage_monitor_service_test",
    ":storage_total_status_service_test",
    ":volume_storage_status_service_test",
  ]
}
