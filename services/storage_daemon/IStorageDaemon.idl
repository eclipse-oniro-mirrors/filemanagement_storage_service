/*
 * Copyright (c) 2021-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
rawdata OHOS.StorageManager.StorageFileRawData;
import ../storage_manager/IUeceActivationCallback;
interface OHOS.StorageDaemon.IStorageDaemon{
     [ipccode 1] void Shutdown();
     [ipccode 2] void Mount([in] String volId, [in] unsigned int flags);
     [ipccode 3] void UMount([in] String volId);
     [ipccode 4] void Check([in] String volId);
     [ipccode 5] void Format([in] String volId, [in] String fsType);
     [ipccode 6] void Partition([in] String diskId, [in] int type);
     [ipccode 7] void SetVolumeDescription([in] String volId, [in] String description);
     [ipccode 10] void StartUser([in] int userId);
     [ipccode 11] void StopUser([in] int userId);
     [ipccode 8] void PrepareUserDirs([in] int userId, [in] unsigned int flags);
     [ipccode 9] void DestroyUserDirs([in] int userId,[in] unsigned int flags);
     [ipccode 12] void CompleteAddUser([in] int userId);
     // fscrypt api
     [ipccode 13] void InitGlobalKey();
     [ipccode 14] void InitGlobalUserKeys();
     [ipccode 17] void DeleteUserKeys([in] unsigned int userId);
     [ipccode 18] void UpdateUserAuth([in] unsigned int userId, [in] unsigned long secureUid,
          [in] unsigned char[] token,[in] unsigned char[] oldSecret,[in] unsigned char[] newSecret);
     [ipccode 19] void UpdateUseAuthWithRecoveryKey([in] unsigned char[] authToken,
          [in] unsigned char[] newSecret, [in] unsigned long secureUid, [in] unsigned int userId,
          [in] List<List<unsigned char>> plainText);
     [ipccode 20] void ActiveUserKey([in] unsigned int userId, [in] unsigned char[] token,
                                     [in] unsigned char[] secret);
     [ipccode 21] void InactiveUserKey([in] unsigned int userId);
     [ipccode 22] void UpdateKeyContext([in] unsigned int userId , [in] boolean needRemoveTmpKey);
     [ipccode 23] void MountCryptoPathAgain([in] unsigned int userId);
     [ipccode 26] void LockUserScreen([in] unsigned int userId);
     [ipccode 27] void UnlockUserScreen([in] unsigned int user, [in] unsigned char[] token,
                                        [in] unsigned char[] secret);
     [ipccode 28] void GetLockScreenStatus([in] unsigned int user, [out] boolean lockScreenStatus);
     [ipccode 33] void GenerateAppkey([in] unsigned int userId, [in] unsigned int hashId, [out] String keyId,
                                      [in] boolean needReSet);
     [ipccode 34] void DeleteAppkey([in] unsigned int userId, [in] String keyId);
     [ipccode 38] void CreateRecoverKey([in] unsigned int userId, [in] unsigned int userType,
                                        [in] unsigned char[] token,[in] unsigned char[] secret);
     [ipccode 39] void SetRecoverKey([in] unsigned char[] key);
     // app file share api
     [ipccode 24] int[] CreateShareFile([in] StorageFileRawData rawData,
                                        [in] unsigned int tokenId, [in] unsigned int flag);
     [oneway, ipccode 25] void DeleteShareFile([in] unsigned int tokenId, [in] StorageFileRawData rawData);
     [ipccode 29] void SetBundleQuota([in] String bundleName, [in] int uid, [in] String bundleDataDirPath,
                                      [in] int limitSizeMb);
     [ipccode 30] void GetOccupiedSpace([in] int idType, [in] int id, [out] long size);
     [ipccode 31] void UpdateMemoryPara([in] int size, [out] int oldSize);
     [ipccode 35] void MountDfsDocs([in] int userId, [in] String relativePath,
          [in] String networkId, [in] String deviceId);
     [ipccode 36] void UMountDfsDocs([in] int userId, [in] String relativePath,
          [in] String networkId, [in] String deviceId);
     [ipccode 37] void GetFileEncryptStatus([in] unsigned int userId, [out] boolean isEncrypted,
                                            [in] boolean needCheckDirMount);
     // media fuse
     [ipccode 40] void MountMediaFuse([in] int userId, [out] FileDescriptor devFd);
     [ipccode 41] void UMountMediaFuse([in] int userId);
     [ipccode 42] void GetUserNeedActiveStatus([in] unsigned int userId, [out] boolean needActive);
     [ipccode 43] void MountFileMgrFuse([in] int userId, [in] String path, [out] FileDescriptor fuseFd);
     [ipccode 44] void UMountFileMgrFuse([in] int userId, [in] String path);
     [ipccode 45] void QueryUsbIsInUse([in] String diskPath, [out] boolean isInUse);
     [ipccode 46] void ResetSecretWithRecoveryKey([in] unsigned int userId, [in] unsigned int rkType,
                                                  [in] unsigned char[] key);
     [ipcincapacity 131071, ipcoutcapacity 131071, ipccode 47] void IsFileOccupied([in] String path, [in] String[] inputList,
                                      [out] String[] outputList, [out] boolean isOccupy);
     [ipccode 49] void MountDisShareFile([in] int userId, [in] OrderedMap<String, String> shareFiles);
     [ipccode 50] void UMountDisShareFile([in] int userId, [in] String networkId);
     [ipccode 51] void TryToFix([in] String volId, [in] unsigned int flags);
     [ipccode 52] void InactiveUserPublicDirKey([in] unsigned int userId);
     [ipccode 53] void QueryOccupiedSpaceForSa([in] String storageStatus);
     [ipccode 54] void MountUsbFuse([in] String volumeId, [out] String fsUuid, [out] FileDescriptor fuseFd);
     [ipccode 55] void RegisterUeceActivationCallback([in] IUeceActivationCallback ueceCallback);
     [ipccode 56] void UnregisterUeceActivationCallback();
     [ipccode 57] void CreateUserDir([in] String path, [in] unsigned int mode,
                                     [in] unsigned int uid, [in] unsigned int gid);
     [ipccode 58] void DeleteUserDir([in] String path);
     [ipccode 59] void SetDirEncryptionPolicy([in] unsigned int userId, [in] String dirPath, [in] unsigned int level);
     [ipccode 60] void UpdateUserPublicDirPolicy([in] unsigned int userId);
     [ipccode 61] void StatisticSysDirSpace();
}