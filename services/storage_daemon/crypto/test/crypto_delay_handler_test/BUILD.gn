# Copyright (C) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

ohos_unittest("CryptoDelayHandlerTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${storage_service_path}/cfi_blocklist.txt"
  }
  module_out_path = "storage_service/storage_service/storage_daemon"

  defines = [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
    "USER_CRYPTO_MIGRATE_KEY",
    "private = public",
  ]

  include_dirs = [
    "${storage_daemon_path}/crypto/test/mock",
    "${storage_daemon_path}/include",
    "${storage_daemon_path}/include/crypto",
    "${storage_daemon_path}/include/mock",
    "${storage_service_common_path}/include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  sources = [
    "${storage_daemon_path}/crypto/src/crypto_delay_handler.cpp",
    "${storage_daemon_path}/crypto/src/fscrypt_key_v1_ext.cpp",
    "${storage_daemon_path}/mock/base_key_mock.cpp",
    "${storage_daemon_path}/mock/fscrypt_key_v2_mock.cpp",
    "crypto_delay_handler_test.cpp",
  ]

  deps = [ "${storage_daemon_path}:storage_common_utils" ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "huks:libhukssdk",
    "os_account:os_account_innerkits",
    "samgr:samgr_proxy",
  ]

  if (enable_screenlock_manager) {
    defines += [ "ENABLE_SCREENLOCK_MANAGER" ]
    external_deps += [ "screenlock_mgr:screenlock_client" ]
  }

}

group("crypto_delay_handler_test") {
  testonly = true
  deps = [ ":CryptoDelayHandlerTest" ]
}
