# Copyright (C) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

module_output_path = "storage_service/storage_service/crypto"

config("module_private_config") {
  visibility = [ ":*" ]
}

ohos_moduletest("CryptoSubTest") {
  module_out_path = module_output_path

  defines = [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
    "USER_CRYPTO_MIGRATE_KEY",
    "private = public",
    "protected = public",
  ]

  include_dirs = [
    "${storage_daemon_path}/include",
    "${storage_daemon_path}/include/crypto",
    "${storage_service_common_path}/include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  sources = [
    "${storage_daemon_path}/user/src/mount_manager.cpp",
    "${storage_daemon_path}/user/src/user_manager.cpp",
    "crypto_key_test.cpp",
  ]

  if (storage_service_crypto_test) {
    defines += [ "CRYPTO_TEST" ]
  }

  configs = [ ":module_private_config" ]

  deps = [
    "${storage_daemon_path}:storage_daemon_header",
    "${storage_daemon_path}/crypto:libsdcrypto",
    "${storage_daemon_path}/libfscrypt:libfscryptutils",
  ]
  external_deps = [
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "huks:libhukssdk",
    "init:libbegetutil",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
  ]

  if (enable_tee_client) {
    defines += [ "RECOVER_KEY_TEE_ENVIRONMENT" ]
    external_deps += [ "tee_client:libteec" ]
  }

  if (enable_screenlock_manager) {
    defines += [ "ENABLE_SCREENLOCK_MANAGER" ]
    external_deps += [ "screenlock_mgr:screenlock_client" ]
  }

  if (enable_huks_hdi) {
    defines += [ "HUKS_IDL_ENVIRONMENT" ]
    external_deps += [ "drivers_interface_huks:libhuks_proxy_1.1", ]
  }
}

group("crypto_test") {
  testonly = true
  deps = [ ":CryptoSubTest" ]
}
