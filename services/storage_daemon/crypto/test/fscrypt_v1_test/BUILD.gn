# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

module_output_path = "storage_service/storage_service/crypto"

config("module_private_config") {
  visibility = [ ":*" ]
}

ohos_moduletest("FscryptKeyV1Test") {
  module_out_path = module_output_path

  defines = [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
    "OPENSSL_SUPPRESS_DEPRECATED",
    "USER_CRYPTO_MIGRATE_KEY",
    "KMSG_LOG",
    "private = public",
  ]

  include_dirs = [
    "${storage_daemon_path}/crypto/test/mock",
    "${storage_daemon_path}/include",
    "${storage_daemon_path}/include/crypto",
    "${storage_daemon_path}/include/mock",
    "${storage_service_common_path}/include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  sources = [
    "${storage_daemon_path}/crypto/src/crypto_delay_handler.cpp",
    "${storage_daemon_path}/crypto/src/fbex.cpp",
    "${storage_daemon_path}/crypto/src/fscrypt_key_v1.cpp",
    "${storage_daemon_path}/crypto/src/fscrypt_key_v2.cpp",
    "${storage_daemon_path}/crypto/src/huks_master.cpp",
    "${storage_daemon_path}/crypto/src/iam_client.cpp",
    "${storage_daemon_path}/crypto/src/key_backup.cpp",
    "${storage_daemon_path}/crypto/src/key_crypto_utils.cpp",
    "${storage_daemon_path}/crypto/src/key_manager.cpp",
    "${storage_daemon_path}/crypto/src/openssl_crypto.cpp",
    "${storage_daemon_path}/crypto/src/recover_manager.cpp",
    "${storage_daemon_path}/crypto/test/fscrypt_v1_test/fscrypt_key_v1_test.cpp",
    "${storage_daemon_path}/crypto/test/mock/fscrypt_key_v1_ext_mock.cpp",
    "${storage_daemon_path}/mock/base_key_mock.cpp",
  ]

  if (storage_service_crypto_test) {
    defines += [ "CRYPTO_TEST" ]
  }

  configs = [ ":module_private_config" ]

  deps = [
    "${storage_daemon_path}:storage_common_utils",
    "${storage_daemon_path}/libfscrypt:libfscryptutils",
  ]

  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "huks:libhukssdk",
    "init:libbegetutil",
    "ipc:ipc_single",
    "openssl:libcrypto_shared",
    "os_account:os_account_innerkits",
    "samgr:samgr_proxy",
  ]

  if (enable_tee_client) {
    defines += [ "RECOVER_KEY_TEE_ENVIRONMENT" ]
    external_deps += [ "tee_client:libteec" ]
  }
  if (enable_user_auth_framework) {
    defines += [ "USER_AUTH_FRAMEWORK" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }

  if (enable_screenlock_manager) {
    defines += [ "ENABLE_SCREENLOCK_MANAGER" ]
    external_deps += [ "screenlock_mgr:screenlock_client" ]
  }
}

group("fscrypt_key_v1_test") {
  testonly = true
  deps = [ ":FscryptKeyV1Test" ]
}
