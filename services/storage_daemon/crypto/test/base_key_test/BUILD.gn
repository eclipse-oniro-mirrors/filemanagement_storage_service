# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

ohos_unittest("BaseKeyTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${storage_service_path}/cfi_blocklist.txt"
  }
  module_out_path = "storage_service/storage_daemon"

  defines = [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
    "USER_CRYPTO_MIGRATE_KEY",
    "private=public",
    "protected=public",
  ]

  include_dirs = [
    "${storage_daemon_path}/crypto/test/mock",
    "${storage_daemon_path}/include",
    "${storage_daemon_path}/include/crypto",
    "${storage_daemon_path}/include/utils",
    "${storage_service_common_path}/include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  sources = [
    "${storage_daemon_path}/crypto/src/base_key.cpp",
    "${storage_daemon_path}/crypto/src/fscrypt_key_v2.cpp",
    "${storage_daemon_path}/crypto/src/iam_client.cpp",
    "${storage_daemon_path}/crypto/src/key_backup.cpp",
    "${storage_daemon_path}/crypto/test/mock/huks_master_mock.cpp",
    "${storage_daemon_path}/crypto/test/mock/openssl_crypto_mock.cpp",
    "${storage_daemon_path}/utils/file_utils.cpp",
    "${storage_daemon_path}/utils/storage_radar.cpp",
    "${storage_daemon_path}/utils/string_utils.cpp",
    "base_key_test.cpp",
  ]

  deps = [ "${storage_daemon_path}/libfscrypt:libfscryptutils" ]

  external_deps = [
    "c_utils:utils",
    "drivers_interface_huks:libhuks_proxy_1.1",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "huks:libhukssdk",
  ]

  if (enable_user_auth_framework) {
    defines += [ "USER_AUTH_FRAMEWORK" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
}

group("base_key_test") {
  testonly = true
  deps = [ ":BaseKeyTest" ]
}
