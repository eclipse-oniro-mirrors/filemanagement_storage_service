# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/ohos.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

## build sm execute bin file
config("fscrypt_utils_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${storage_daemon_path}/include/libfscrypt",
    "${storage_service_common_path}/include",
  ]

  cflags = [
    "-g3",
    "-Wall",
    "-O2",
  ]
}

config("fscrypt_utils_public_config") {
  visibility = [ ":*" ]

  include_dirs = [ "${storage_daemon_path}/include/libfscrypt" ]

  cflags = [
    "-g3",
    "-Wall",
    "-O2",
  ]
}

ohos_static_library("libfscryptutils") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  output_name = "libfscryptutils"
  sources = [
    "src/fscrypt_control.c",
    "src/fscrypt_utils.c",
    "src/init_utils.c",
    "src/key_control.c",
    "src/storage_radar_c.c",
    "src/sysparam_dynamic.c",
  ]

  if (storage_service_user_crypto_manager) {
    defines = [ "USER_CRYPTO_MANAGER" ]
  }

  configs = [ ":fscrypt_utils_config" ]

  defines += [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
  ]

  subsystem_name = "filemanagement"
  part_name = "storage_service"
}

ohos_static_library("libfscryptutils_static") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  output_name = "libfscryptutils_static"
  sources = [
    "src/fscrypt_control.c",
    "src/fscrypt_utils.c",
    "src/key_control.c",
    "src/storage_radar_c.c",
    "src/sysparam_static.c",
  ]

  if (storage_service_user_crypto_manager) {
    defines = [ "USER_CRYPTO_MANAGER" ]
  }

  configs = [ ":fscrypt_utils_config" ]
  public_configs = [ ":fscrypt_utils_public_config" ]

  defines += [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
  ]

  external_deps = [
    "bounds_checking_function:libsec_static",
    "c_utils:utils",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
  ]

  subsystem_name = "filemanagement"
  part_name = "storage_service"
}
