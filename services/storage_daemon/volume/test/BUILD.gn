# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

ROOT_DIR = "${storage_service_path}/services"

ohos_unittest("external_volume_info_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${storage_service_path}/cfi_blocklist.txt"
  }
  module_out_path = "storage_service/storage_daemon"

  defines = [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "private=public",
  ]

  include_dirs = [
    "$ROOT_DIR/storage_daemon/include",
    "$ROOT_DIR/common/include",
    "$ROOT_DIR/storage_manager/include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  sources = [
    "$ROOT_DIR/storage_daemon/ipc/src/storage_manager_client.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/external_volume_info.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/process.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/volume_info.cpp",
    "$ROOT_DIR/storage_daemon/volume/test/external_volume_info_test.cpp",
  ]

  deps = [
    "${storage_daemon_path}:storage_common_utils",
    "${storage_daemon_path}:storage_daemon_test_ipc",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("process_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${storage_service_path}/cfi_blocklist.txt"
  }
  module_out_path = "storage_service/storage_daemon"

  defines = [ "STORAGE_LOG_TAG = \"StorageDaemon\"" ]

  include_dirs = [
    "$ROOT_DIR/storage_daemon/include",
    "$ROOT_DIR/storage_daemon/include/volume",
    "$ROOT_DIR/common/include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  sources = [
    "$ROOT_DIR/storage_daemon/volume/src/external_volume_info.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/process.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/volume_info.cpp",
    "$ROOT_DIR/storage_daemon/volume/test/process_test.cpp",
  ]

  deps = [
    "${storage_daemon_path}:storage_common_utils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
  ]
}

ohos_unittest("volume_info_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${storage_service_path}/cfi_blocklist.txt"
  }
  module_out_path = "storage_service/storage_daemon"

  defines = [ "STORAGE_LOG_TAG = \"StorageDaemon\"" ]

  include_dirs = [
    "$ROOT_DIR/storage_daemon/include",
    "$ROOT_DIR/storage_daemon/utils/test/common",
    "$ROOT_DIR/common/include",
    "$ROOT_DIR/storage_manager/include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  sources = [
    "$ROOT_DIR/storage_daemon/ipc/src/storage_manager_client.cpp",
    "$ROOT_DIR/storage_daemon/utils/test/common/help_utils.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/volume_info.cpp",
    "$ROOT_DIR/storage_daemon/volume/test/volume_info_test.cpp",
  ]

  deps = [
    "${storage_daemon_path}:storage_common_utils",
    "${storage_daemon_path}:storage_daemon_test_ipc",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("volume_manager_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = "storage_service/storage_daemon"

  defines = [ "STORAGE_LOG_TAG = \"StorageDaemon\"" ]

  include_dirs = [
    "$ROOT_DIR/storage_daemon/include",
    "$ROOT_DIR/storage_daemon/include/volume",
    "$ROOT_DIR/common/include",
    "$ROOT_DIR/storage_manager/include",
    "${storage_interface_path}/innerkits/storage_manager/native",
  ]

  sources = [
    "$ROOT_DIR/storage_daemon/ipc/src/storage_manager_client.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/external_volume_info.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/process.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/volume_info.cpp",
    "$ROOT_DIR/storage_daemon/volume/src/volume_manager.cpp",
    "$ROOT_DIR/storage_daemon/volume/test/volume_manager_test.cpp",
    "$ROOT_DIR/storage_manager/innerkits_impl/src/volume_core.cpp",
  ]

  deps = [
    "${storage_daemon_path}:storage_common_utils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

group("storage_daemon_volume_test") {
  testonly = true
  deps = [
    ":external_volume_info_test",
    ":process_test",
    ":volume_info_test",
    ":volume_manager_test",
  ]
}
