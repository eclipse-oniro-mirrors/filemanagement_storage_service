# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//foundation/filemanagement/storage_service/storage_service_aafwk.gni")

ohos_static_library("storage_daemoncommon_fuzztest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "${storage_daemon_path}/ipc/src/storage_daemon.cpp",
    "${storage_daemon_path}/ipc/src/storage_daemon_provider.cpp",
    "${storage_daemon_path}/quota/quota_manager.cpp",
    "${storage_daemon_path}/user/src/mount_manager.cpp",
    "${storage_daemon_path}/user/src/mount_manager_ext.cpp",
    "${storage_daemon_path}/user/src/user_manager.cpp",
  ]

  defines = [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
    "KMSG_LOG",
  ]

  cflags = [
    "-fstack-protector-strong",
    "-O2",
  ]

  configs = [ "${storage_daemon_path}:storage_daemon_config" ]

  deps = [
    "${storage_daemon_path}/crypto:libsdcrypto",
    "${storage_daemon_path}:storage_common_utils",
    "${storage_daemon_path}:storage_daemon_ipc",
    "${storage_interface_path}/innerkits/storage_manager/native:storage_manager_sa_proxy",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "app_file_service:fileshare_native",
    "app_file_service:fileuri_native",
    "app_file_service:sandbox_helper_native",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "crypto_framework:crypto_framework_lib",
    "eventhandler:libeventhandler",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "huks:libhukssdk",
    "init:libbegetutil",
    "ipc:ipc_single",
    "openssl:libcrypto_shared",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (enable_user_auth_framework) {
    defines += [ "USER_AUTH_FRAMEWORK" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }

  subsystem_name = "filemanagement"
  part_name = "storage_service"
}

group("storage_service_fuzztest") {
  testonly = true
  deps = [
    # deps file
    "${storage_service_path}/test/fuzztest/bundlestats_fuzzer:BundleStatsFuzzTest",
    "${storage_service_path}/test/fuzztest/disk_fuzzer:DiskFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptodeleteuserkey_fuzzer:FileSystemCryptoDeleteUserKeyFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptoupdateuserauth_fuzzer:FileSystemCryptoUpdateUserAuthFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptoactiveuserkey_fuzzer:FileSystemCryptoActiveUserKeyFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptoinactiveuserkey_fuzzer:FileSystemCryptoInActiveUserKeyFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptoupdatekeycontext_fuzzer:FileSystemCryptoUpdateKeyContextFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptolockuserscreen_fuzzer:FileSystemCryptoLockUserScreenFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptounlockuserscreen_fuzzer:FileSystemCryptoUnLockUserScreenFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptogetlockscreenstatus_fuzzer:FileSystemCryptoGetLockScreenStatusFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptogenerateappkey_fuzzer:FileSystemCryptoGenerateAppKeyFuzzTest",
    "${storage_service_path}/test/fuzztest/filesystemcryptodeleteappkey_fuzzer:FileSystemCryptoDeleteAppKeyFuzzTest",
    "${storage_service_path}/test/fuzztest/fileutils_fuzzer:FileUtilsFuzzTest",
    "${storage_service_path}/test/fuzztest/fscryptutils_fuzzer:FscryptUtilsFuzzTest",
    "${storage_service_path}/test/fuzztest/keycontrol_fuzzer:KeyControlFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonprovidercreatesharefile_fuzzer:StorageDaemonProviderCreateShareFileFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonproviderdeletesharefile_fuzzer:StorageDaemonProviderDeleteShareFileFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonproviderlockuserscreen_fuzzer:StorageDaemonProviderLockUserScreenFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonproviderupdatememorypara_fuzzer:StorageDaemonProviderUpdateMemoryParaFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonprovidershutdown_fuzzer:StorageDaemonProviderShutdownFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonprovidercreaterecoverkey_fuzzer:StorageDaemonProviderCreateRecoverKeyFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonprovidersetrecoverkey_fuzzer:StorageDaemonProviderSetRecoverKeyFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonprovidermountmediafuse_fuzzer:StorageDaemonProviderMountMediaFuseFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonproviderumountmediafuse_fuzzer:StorageDaemonProviderUMountMediaFuseFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonproxy_fuzzer:StorageDaemonProxyFuzzTest",
    "${storage_service_path}/test/fuzztest/storagedaemonstub_fuzzer:StorageDaemonStubFuzzTest",
    "${storage_service_path}/test/fuzztest/storagemanagerprovider_fuzzer:StorageManagerProviderFuzzTest",
    "${storage_service_path}/test/fuzztest/storagemanagerstub_fuzzer:StorageManagerStubFuzzTest",
    "${storage_service_path}/test/fuzztest/storagestats_fuzzer:StorageStatsFuzzTest",
    "${storage_service_path}/test/fuzztest/storagestatusservice_fuzzer:StorageStatusServiceFuzzTest",
    "${storage_service_path}/test/fuzztest/stringutils_fuzzer:StringUtilsFuzzTest",
    "${storage_service_path}/test/fuzztest/sysparamdynamic_fuzzer:SysparamDynamicFuzzTest",
    "${storage_service_path}/test/fuzztest/sysparamstatic_fuzzer:SysparamStaticFuzzTest",
    "${storage_service_path}/test/fuzztest/volumecore_fuzzer:VolumeCoreFuzzTest",
    "${storage_service_path}/test/fuzztest/volumeexternal_fuzzer:VolumeExternalFuzzTest",
  ]
  if (support_open_source_libmtp &&
      storage_service_external_storage_qos_trans) {
    deps +=
        [ "${storage_service_path}/test/fuzztest/libmtp_fuzzer:LibmtpFuzzTest" ]
  }
}
